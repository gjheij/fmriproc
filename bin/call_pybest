#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_pybest

wrapper for pybest that takes the output from fMRIprep and denoises the data. The output of this
script is a set up numpy arrays that can be loaded in by prf_fitting.ipynb. It is important to
have pybest in a conda environment, as it uses the newest version of Nilearn which has not been
released yet (https://github.com/nilearn/nilearn). By default, call_pybest will look for an envi-
ronment called fmriprep_denoising, but you can specify your own environment as long as it has py-
best in it. Check for instruction this page https://github.com/lukassnoek/pybest. As far as I've 
tested, it only works with surface files. Volumetric data outputs pepper corn noise pattern.

Usage:
  call_pybest [mandatory] [optional] [options]

Mandatory:
  -s <sub number> number of subject's FreeSurfer directory from which you can omit "sub-" (e.g.,
                  for "sub-001", enter 001). If left empty pybest will process everything it
                  can find in the fmriprep folder

Optional:    
  -n <ses number> session number. If left empty or 'all', pybest will process everything it 
                  can find in the fmriprep folder.
  -o <output dir> path to output directory. By default it will create a subject-specific folder,
                  but you can set where that subject folder is going to go. By default this
                  script will output to DIR_DATA_DERIV/pybest
  -r <space>      the space to process. fMRIprep outputs several kinds of standard spaces such
                  as the MNI152NLin2009cAsym, or FSL-templates, but also fsnative. The latter
                  is the default, because we want to project the results in pycortex.
  -f <fprep dir>  path to fmriprep derivatives directory. Will look by default in the DIR_DATA_
                  DERIV/fmriprep
  -c <n_slots>    number of slots to use when we're on a cluster
  -p <n_comps>    number of components to use for decomposition. Default = 20 (as per Marco's
                  investigations for 3D-EPI, TR=1.32 BOLD data)
  -x <kwargs>     Extra arguments that will be directly passed to 'pybest'. The format
                  should be as follows: different parameters comma-separated, and parameter-value
                  pair separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g.,:
                    "-x --start-from=noiseproc,--ricor-dir=/some/directory,--skip-tr"

                  The kwargs specified in this flag take precedent over the default args:

                  cmd_args=(
                    pybest
                    --subject     # subject ID            (-s flag)
                    --session     # session ID            (-n flag)
                    --n-cpus      # number of slots       (-c flag)
                    --task        # TASK_IDS-variable     (see '\${CONFIG_FILE}')
                    --space       # PYBEST_SPACE-variable (-r flag or see '\${CONFIG_FILE}')
                    --hemi        # both; (if surface)
                    --out-dir     # output dir            (-o flag)
                    --n-comps     # PYBEST_COMPS-variable (-p flag or see '\${CONFIG_FILE}')
                    --verbose ERROR
                    --save-all
                    input_dir     # input directory       (-f flag)     
                  )

  -t <task ID>    limit pybest processing to a specific task. Default is all tasks in TASK_IDS
                  in the spinoza_setup-file Can also be comma-separated list: task1,task2  

Options:
  -h|--help       print this help text
  --raw           undo the z-scoring done by pybest (call_unzscore)
  --fsaverage     utilize FSAverage space
  --fsnative      utilize FSNative space
  --post-only     only run un-zscoring AFTER pybest
  --pre-only      only store AVG/STD BEFORE pybest
  --pyb-only      only run pybest (does not run 'call_unzscore' at all)

Example:
  call_pybest -s 001
  call_pybest -s 001 -n 1 -o /derivatives/pybest -r "fsnative" -f /derivatives/fmriprep -c 10
  call_pybest -s 001 -n 1 -o /derivatives/pybest -p 25 -f /derivatives/fmriprep -c 10

---------------------------------------------------------------------------------------------------

USAGE

}

# set defaults that will be overwritten if flags are given
task_ids=""
sub_input=""
cpu_input=""
ses_input=""
ses_raw=""
output_dir=${DIR_DATA_DERIV}/pybest
input_dir=${DIR_DATA_DERIV}/fmriprep
raw=1
n_comps=20
post_only=0
pre_only=0
pyb_only=0
kwargs=""
while getopts :-:hs:n:o:f:c:v:r:t:p:x: arg; do
  case $arg in
    -)
      case "${OPTARG}" in
        no-raw)
          raw=0
          ;;
        fsaverage)
          in_space="fsaverage"
          ;; 
        fsnative)
          in_space="fsnative"
          ;;
        post-only)
          post_only=1
          ;;
        pre-only)
          pre_only=1
          ;;
        pyb-only)
          pyb_only=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
            echo "Unknown option --${OPTARG}"
            exit 1
          fi
          ;;
      esac;;
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;;
    o)  outputdir="${OPTARG}"
          ;;
    r)  in_space="${OPTARG}"
          ;;
    f)  fprepdir="${OPTARG}"
          ;;
    c)  n_slots="${OPTARG}"
          ;;
    t)  task_ids="${OPTARG}"
          ;;
    p)  n_comps="${OPTARG}"
          ;; 
    x)  kwargs="${OPTARG}"
          ;;
    h)  Usage && exit 0
          ;; 
  esac
done

#-----------------------------------------------------------------------------
# just exist if call_pybest is called
if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Turn kwargs into space-separated array
if [[ -n "${kwargs}" ]]; then
  IFS=' ' read -r -a user_args <<< "$(echo "$kwargs" | tr ',' ' ' | tr '=' ' ')"
else
  user_args=()
fi

# Convert user_args into string for matching
arg_str="${user_args[*]}"

#-----------------------------------------------------------------------------
# read tasks
if [[ -z ${task_ids} ]]; then
  task_ids=${TASK_IDS[@]}
else
  # read specified tasks into array
  IFS=', ' read -r -a tasks <<< "${task_ids}"
  task_ids=${tasks[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# read subject
if [[ ! -z ${sub} ]]; then
  sub_input="--subject ${sub}"
fi

#-----------------------------------------------------------------------------
# check session input
base_dir="sub-${sub}/"
if [[ ! -z ${ses} ]]; then
  if [[ ${ses} != "all" ]]; then
    ses_input="--session ${ses}"
    ses_raw="--ses ${ses}"
    base_dir+="ses-${ses}"
  fi
fi

#-----------------------------------------------------------------------------
# Default paths
if [[ ! -z "${outputdir}" ]]; then
  output_dir="${outputdir}"
fi

# Set input directory if specified, otherwise default to /derivatives/fmriprep
if [[ ! -z "${fprepdir}" ]]; then
  input_dir="${fprepdir}"
fi

#-----------------------------------------------------------------------------
# make directory
if [[ ! -d "${output_dir}/sub-${sub}" ]]; then
  mkdir -p "${output_dir}/sub-${sub}"
fi 

#-----------------------------------------------------------------------------
# define execution rules
execute_pre=1
if [[ ${post_only} -eq 1 || ${pyb_only} -eq 1 ]]; then
  execute_pre=0
fi

execute_pyb=1
if [[ ${post_only} -eq 1 || ${pre_only} -eq 1 ]]; then
  execute_pyb=0
fi

execute_post=1
if [[ ${pyb_only} -eq 1 || ${pre_only} -eq 1 ]]; then
  execute_post=0
fi    

#-----------------------------------------------------------------------------
# define base command
cmd_args=(pybest)

# Add defaults only if not already specified
[[ ! "$arg_str" =~ "--subject" ]] && cmd_args+=(${sub_input})
[[ ! "$arg_str" =~ "--session" ]] && cmd_args+=(${ses_input})
[[ ! "$arg_str" =~ "--out-dir" ]] && cmd_args+=(--out-dir "${outputdir}")
[[ ! "$arg_str" =~ "--n-comps" ]] && cmd_args+=(--n-comps "${n_comps}")
[[ ! "$arg_str" =~ "--space" ]] && cmd_args+=(--space "${in_space}")
[[ ! "$arg_str" =~ "--verbose" ]] && cmd_args+=(--verbose ERROR)
[[ ! "$arg_str" =~ "--save-all" ]] && cmd_args+=(--save-all)

# number of slots
if [[ ! -z ${n_slots} ]]; then
  [[ ! "$arg_str" =~ "--n-cpus" ]] && cmd_args+=("--n-cpus ${n_slots}")
fi

#-----------------------------------------------------------------------------
# Pre-pybest: save std and mean in pkl files for unz-scoring

# cmd to call_unzscore
base_cmd=(
  call_unzscore
  --sub "${sub}"
  "${ses_raw}"
  --out "${outputdir}"
  --fprep "${input_dir}"
  --space "${in_space}"
)

#-----------------------------------------------------------------------------
# SURFACE-BASED 

# loop through tasks; I know pybest can do ALL tasks at once, but it's nice to have a limiter in 
# here
for task_id in ${task_ids[@]}; do
  echo "Running pybest on task: \"${task_id}\""
  if [[ ${in_space} == "fsnative" || ${in_space} == "fsaverage" ]]; then
    
    # save standard deviation and mean in tmp/ folder (pkl files)
    if [[ ${execute_pre} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Saving average/standard deviation"
        
        # copy base command and add --pre
        this_cmd=(
          "${base_cmd[@]}"
          --task "${task_id}"
          --pre
        )

        # run
        print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_unzscore" "Stage=\"pre\""
          exit 1
        fi 
      fi
    fi

    #-----------------------------------------------------------------------------
    # Run pybest
    if [[ ${execute_pyb} -eq 1 ]]; then

      for hemi in "L" "R"; do

        echo "Dealing with hemi-${hemi}"
        
        # Clone command args to avoid mutating the original
        this_cmd=(
          "${cmd_args[@]}"
          --task "${task_id}"
        )

        # update hemi-flag
        [[ ! "$arg_str" =~ "--hemi" ]] && this_cmd+=(--hemi "${hemi}")
        
        # final input
        this_cmd+=("${input_dir}")
        # run
        print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "pybest"
          exit 1
        fi
      done
    fi
    
    #-----------------------------------------------------------------------------
    # Post-pybest: un-do zscoring
    if [[ ${execute_post} -eq 1 ]]; then
      # undo z-scoring
      if [ ${raw} -eq 1 ]; then
        echo "Un-zcoring output from pybest"

        # copy base command and add --pre
        this_cmd=(
          "${base_cmd[@]}"
          --task "${task_id}"
          --post
        )

        # run
        print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_unzscore" "Stage=\"post\""
          exit 1
        fi 
      fi
    fi
    echo "Done"
    
  else

    #-----------------------------------------------------------------------------
    # VOLUMETRIC

    
    # save standard deviation and mean in tmp/ folder (pkl files)
    if [[ ${execute_pre} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Saving average/standard deviation"
        
        # copy base command and add --pre
        this_cmd=(
          "${base_cmd[@]}"
          --task "${task_id}"
          --pre
        )

        # run
        print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_unzscore" "Stage=\"pre\""
          exit 1
        fi 
      fi
    fi

    #-----------------------------------------------------------------------------
    # run pybest
    if [[ ${execute_pyb} -eq 1 ]]; then

      # Clone command args to avoid mutating the original
      this_cmd=(
        "${cmd_args[@]}"
        --task "${task_id}"
        "${input_dir}"
      )

      # run
      print_cmd "${cmd[@]}" && eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "pybest"
        exit 1
      fi
    fi

    #-----------------------------------------------------------------------------
    # undo z-scoring
    if [[ ${execute_post} -eq 1 ]]; then
      if [ ${raw} -eq 1 ]; then
        echo "Un-zcoring output from pybest"

        # copy base command and add --pre
        this_cmd=(
          "${base_cmd[@]}"
          --task "${task_id}"
          --post
        )

        # run
        print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
        if [[ $? -ne 0 ]]; then
          echo
          print_line -
          print_error_msg "$(basename ${0})" "call_unzscore" "Stage=\"post\""
          exit 1
        fi 
      fi
      echo "Done"    
    fi       

    #-----------------------------------------------------------------------------
    # MASKING

    # find masks
    out_dir="${output_dir}/${base_dir}"

    if [[ ${in_space} == "func" ]]; then
      mask=(
        $(
          find -L ${out_dir}/preproc \
          -type f \
          -name "*task-${task_id}*" \
          -and -name "*desc-preproc_mask.nii.gz" \
          -and -not -name "*space-*" \
          2>/dev/null
        )
      )
    else
      mask=(
        $(
          find -L ${out_dir}/preproc \
          -type f \
          -name "*task-${task_id}*" \
          -and -name "*space-${in_space}*" \
          -and -name "*desc-preproc_mask.nii.gz" \
          2>/dev/null
        )
      )
    fi

    #-----------------------------------------------------------------------------
    # loop through masks
    n_masks=${#mask[@]}
    if [[ ${n_masks} -gt 0 ]]; then
      if [[ ${n_masks} -gt 1 ]]; then
        echo "Found multiple masks in \"${output_dir}\""
        for i in ${mask[@]}; do
          echo " $i"
        done
      else
        # dir is different depending on unzcoring or not.
        if [[ ${raw} -eq 1 ]]; then
          ddir="unzscored"
        else
          ddir="denoising"
        fi

        # search for bold files
        if [[ ${in_space} == "func" ]]; then
          bold_files=(
            $(
              find -L "${out_dir}/${ddir}" \
              -type f \
              -name "*task-${task_id}*" \
              -and -name "*desc-denoised_bold.nii.gz" \
              -and -not -name "*space-*" \
              2>/dev/null
            )
          )
        else
          bold_files=(
            $(
              find -L "${out_dir}/${ddir}" \
              -type f \
              -name "*task-${task_id}*" \
              -and -name "*space-${in_space}*" \
              -and -name "*desc-denoised_bold.nii.gz" \
              2>/dev/null
            )
          )
        fi

        # apply masks
        echo "Applying \"${mask}\" to ${#bold_files[@]} nifti-files"
        if [[ ${#bold_files[@]} -gt 0 ]]; then

          for bold in ${bold_files[@]}; do
            masked_bold="${bold%/*/*}/masked/${bold##*/}"
            if [[ ! -d "$(dirname ${masked_bold})" ]]; then
              mkdir -p "$(dirname ${masked_bold})"
            fi

            # define and run cmd
            echo -e " Writing ${BOLD_GREEN}${masked_bold}${RESET}"
            cmd=(
              fslmaths 
              "${bold}"
              -mas "${mask}"
              "${masked_bold}"
            )
            eval "${cmd[@]}"

            # check if execution was ok
            if [[ $? -ne 0 ]]; then
              echo
              print_line -
              print_error_msg "$(basename ${0})" "fslmaths"
              exit 1
            fi  

          done
          echo "Done"
        else
          echo
          print_line -
          print_error_msg "$(basename ${0})" "find" "could not find files with \"*${ddir}/*\" and \"*desc-denoised_bold.nii.gz\" in \"${out_dir}\""
          exit 1
        fi
      fi
    else
      print_file_not_in_dir "${sub_name}" "*desc-preproc_mask.nii.gz" "${out_dir}/preproc"
    fi
  fi
done
