#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# Get bash helper functions
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
call_parrec2nii

Wrapper for the parrec2nii to make life a little easier. In theory, it'll only require and input 
directory containing the files to be converted. If no output directory is specified, the script 
will create a directory called INPUT/nifti and store the output there. Because parrec2nii does not 
output a json side-car file by default, we'll attempt to create one based on the information found 
in the par-file; some information (e.g., RepetitionTime) could be missing.

Arguments:
  -i <input>      PAR-file or folder containing PAR-files to be processed. You can also specify the
                  log-file from 'dcm2niix' to look for catastrophic errors. One of these options is
                  always needed!
  -o <output>     output folder. If empty, it will use <input folder>/nifti
  -x <kwargs>     Extra arguments that will be directly passed to 'dcm2niix'/'parrec2nii'. The 
                  format should be as follows: different parameters comma-separated, and parame-
                  ter-value pair separated by '='):
                  
                    "-x <parameter1>=<value1>,<parameter2>=<value2>,<parameterX>=<valueX>"

                  E.g., (see 'parrec2nii --help'):
                      "-x --store-header,--scaling='off'"

                  The kwargs specified in this flag take precedent over the default args:

                  # parrec2nii
                  cmd_args=(
                    parrec2nii
                    --scaling fp  # floating point
                    --verbose     # make noise
                    --compressed  # make nii.gz, suppressed with --no-compress
                    --output-dir  # output directory      (-o flag)
                  )

Options:
  -h|--help       print this help text
  --take-avg-tr   Take the average over all TRs from the par file, rather than the first in the
                  sequence of TRs 
  --no-compress   create nii's instead of nii.gz's (default)
  --force-exec    Force execution even though converted nifti already exists

Examples:
  call_parrec2nii -i /path/to/PARRECs                 # call with folder
  call_parrec2nii -i /path/to/file.par                # call with file
  call_parrec2nii -i /path/to/PARRECs --no-compress   # don't compress; generated '.nii'-file

Notes:
  see 'parrec2nii --help' for more information

---------------------------------------------------------------------------------------------------

USAGE

}

# Allocate input arguments to variables
#
use_case="first"
compress="--compressed"
kwargs=""
force=0
while getopts :-:hi:o:v:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in     
        take-avg-tr)
          use_case="average"
          ;; 
        no-compress)
          compress=""
          ;;
        force-exec)
          force=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;; 
    i)  pathInput="${OPTARG}"
          ;;
    o)  pathOutput="${OPTARG}"
          ;;
    x)  kwargs="${OPTARG}"
          ;; 
    h)  Usage && exit 0
          ;;
  esac
done

if [[ $# -lt 1 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# Check if we have parrec2nii installed
check_python_package "nibabel"

#-----------------------------------------------------------------------------
# Set default inputs/outputs
if [[ -z "${pathInput}" ]]; then
  Usage
  print_error_msg "$(basename ${0})" "find" "Please specify an input folder with '-i <path>'"
  exit 1
fi

# check if input is directory or loose file
pathInput=$(fetch_filepath "${pathInput}")
if [[ -d "${pathInput}" ]]; then
  ff=$(
    find "${pathInput}" \
    -type f \
    -iname "*.par" \
    2>/dev/null
  )
elif [[ -f "${pathInput}" ]]; then
  if [[ $(basename "${pathInput}") == *".txt"* ]]; then
    # do same stuff as in call_dcm2niix
    tmp=$(
      cat "${pathInput}" | \
      grep "Catastrophic" | \
      cut -d"." -f2 | \
      xargs | \
      sed 's/\r$//'
    )

    IFS=$' ' tmp2=($(sort <<<"${tmp[*]}"))
    unset IFS

    # find actual par file (dcm2niix log file does not have extension)
    ff=()
    for par in ${tmp2[@]}; do
      par_fn=$(
        find "$(dirname ${par})" \
        -type f \
        -iname "$(basename ${par})*.par" \
        2>/dev/null
      )
      if [ -f "${par_fn}" ]; then
        ff+=("${par_fn}")
      fi
    done    
  else
    ff="${pathInput}"
  fi
else
  echo
  print_line -
  print_error_msg "$(basename ${0})" "find" "Invalid input: \"${pathInput}\" does not exist. Please specify a PAR-file, the log.txt from dcm2niix, or a directory containing PAR-files"
  exit 1
fi

IFS=$'\n' par_files=($(sort <<<"${ff[*]}"))
unset IFS

if [[ ${#par_files[@]} -eq 0 ]]; then
  echo "nothing to do.."
  exit 0
fi

# deal with output directory
if [[ -z "${pathOutput}" ]]; then
  if [ -f "${pathInput}" ]; then
    pathOutput="$(dirname "${pathInput}")/nifti"
  else
    pathOutput="${pathInput}/nifti"
  fi
fi

if [[ ! -d "${pathOutput}" ]]; then
  mkdir -p "${pathOutput}"
fi

#-----------------------------------------------------------------------------
# Turn kwargs into space-separated array
if [[ -n "${kwargs}" ]]; then
  IFS=' ' read -r -a user_args <<< "$(echo "$kwargs" | tr ',' ' ' | tr '=' ' ')"
else
  user_args=()
fi

# Convert user_args into string for matching
arg_str="${user_args[*]}"

# Initialize base command
base_cmd=(parrec2nii)

# Check for presence before adding default long flags
[[ ! "$arg_str" =~ "--scaling" ]] && base_cmd+=("--scaling" "fp")

if [[ ! "$arg_str" =~ (--verbose|-v) ]]; then
  base_cmd+=("--verbose")
fi

if [[ ! "$arg_str" =~ (--output-dir|-o) ]]; then
  base_cmd+=("--output-dir" "${pathOutput}")
fi

# add compression flag
if [[ ! -z ${compress} ]]; then
  [[ ! "$arg_str" =~ "--compressed" ]] && base_cmd+=("${compress}")
fi

# Add user-specified options
base_cmd+=("${user_args[@]}")

#-----------------------------------------------------------------------------
# Run it
for par in ${par_files[@]}; do
  ext="$(fetch_extension "${par}")"
  orig_out="${pathOutput}/$(basename "${par}" .${ext}).nii.gz"
  if [[ ! -f "${orig_out}" || ${force} -eq 1 ]]; then

    # Final positional input (the directory/file)
    this_cmd=(
      "${base_cmd[@]}"
      "${par}"
    )

    print_cmd "${this_cmd[@]}" && eval "${this_cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "parrec2nii"
      exit 1
    fi
  else
    echo "Converted file exists, continuing to BIDS/json stuff"
  fi

  #-----------------------------------------------------------------------------
  # rename according to Protocol Name & Patient Name | read_par comes from call_bashhelper
  pat=$(read_par "${par}" "Patient name")
  prot=$(read_par "${par}" "Protocol name")

  #-----------------------------------------------------------------------------
  # check if volumes are doubled (in case ofll phase data)
  phase=0
  dyns=$(read_par "${par}" "number of dynamics")
  vols=$(
    fslval \
    "${orig_out}" \
    dim4 | \
    xargs
  )

  # check nature of data, MP2RAGE/BOLD etc
  bids_out="${pathOutput}/${pat}_${prot}"
  if [ ${vols} != ${dyns} ]; then

    echo "Output has ${vols} volumes, but PAR-file says ${dyns}"

    #-----------------------------------------------------------------------------
    # check whether image is anatomical; if vols/dyns > 2, we probably have anatomical images with 2x mag and 2x phase
    first_idx=0
    is_anat=$(( ${vols} / ${dyns} ))
    case "${is_anat}" in
      2)
        anat=0
        second_idx=1
        add_txt=" | assuming ${BOLD_RED}BOLD+phase${RESET} data"
        ;;
      4)
        anat=1
        second_idx=2
        add_txt=" | assuming ${BOLD_RED}MP2RAGE${RESET} data"
        ;;
      *)
        echo
        print_line -
        print_error_msg "$(basename ${0})" "type" "Unknown image type count in ${par} (found: ${is_anat})"
        exit 1
        ;;
    esac

    #-----------------------------------------------------------------------------
    # check if phase data is interleaved or at the end by looking at the column of image_type in the par-file. 0=mag|3=phase.
    str="=== IMAGE INFORMATION ="
    line_startpar=$(grep -n -m 1 "${str}" "${par}" | sed  's/\([0-9]*\).*/\1/')
    image_type_column=(
      $(
        sed -n "$((${line_startpar}+2)),$ p" ${par} | \
        awk '{ print $5 }' | \
        sed -e 's/[^0-9]//g' | \
        sed 's/\r$//'
      )
    )

    #-----------------------------------------------------------------------------
    # If first two numbers are 0, we assume that phase comes after mag
    if [[ ${image_type_column[0]} -eq ${image_type_column[${second_idx}]} ]]; then
      txt="Data is not interleaved"
      interleaved=0
    else
      txt="Data is interleaved"
      interleaved=1
    fi

    echo -e "${txt}; extracting and saving magnitude/phase data${add_txt}"
    if [[ ${interleaved} -eq 1 ]]; then
      if [[ ${anat} -eq 0 ]]; then
        
        python - <<END
import nibabel as nb, numpy as np
img = nb.load("${orig_out}")
data = img.get_fdata()
for arr, ext in zip([data[...,::2], data[...,1::2]], [".nii.gz", "_ph.nii.gz"]):
    nb.Nifti1Image(arr, img.affine, img.header).to_filename("${bids_out}" + ext)
END
      else
        python - <<END
import nibabel as nb, numpy as np
img = nb.load("${orig_out}")
data = img.get_fdata()
out = "${bids_out}"
names = ["_inv-1_part-mag", "_inv-1_part-phase", "_inv-2_part-mag", "_inv-2_part-phase"]
slices = [0, 2, 1, 3]
for slc, name in zip(slices, names):
    arr = data[..., slc]
    nb.Nifti1Image(arr, img.affine, img.header).to_filename(out + name + ".nii.gz")
END

      fi

      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "python-code"
        exit 1
      fi
    else

      # find where par become phase
      if [[ ${anat} -eq 0 ]]; then
        fslroi "${orig_out}" "${bids_out}.nii.gz" 0 ${dyns}
        fslroi "${orig_out}" "${bids_out}_ph.nii.gz" ${dyns} -1
      else
        fslroi "${orig_out}" "${bids_out}_inv-1_part-mag.nii.gz" 0 1
        fslroi "${orig_out}" "${bids_out}_inv-1_part-phase.nii.gz" 2 3
        fslroi "${orig_out}" "${bids_out}_inv-2_part-mag.nii.gz" 1 2
        fslroi "${orig_out}" "${bids_out}_inv-2_part-phase.nii.gz" 3 -1
      fi
    fi
  else
    if [[ ! -f "${bids_out}.nii.gz" ]]; then
      mv "${orig_out}" "${bids_out}.nii.gz" 2>/dev/null
    fi
  fi

  #-----------------------------------------------------------------------------
  # define json file
  json_f="${bids_out}.json"
  echo -e "Writing ${BOLD_GREEN}${json_f}${RESET}"

  # function is from call_bashhelper
  pars_for_json "${par}" "${json_f}"
  
  #-----------------------------------------------------------------------------
  # check corresponding EPI file
  if [[ ${bids_out} == *"_bold"* ]]; then

    #-----------------------------------------------------------------------------
    # get location where 0.00 turns into TR
    tr="$(tr_from_par "${par}" ${use_case})"

    # check if it's not 999 (= errpr message from tr_from_par) or 0.0
    if [[ "${tr}" == "999" ]]; then
      echo -e "${BOLD_RED}WARNING${RESET}: could not read TR from par-file.. Setting to 1"
      tr=1
    elif [[ ${tr} == "0.00" ]]; then
      echo -e "${BOLD_RED}WARNING${RESET}: TR=${tr}, this might not be correct.."
    fi

    echo -e "Setting TR to ${BOLD_RED}${tr}${RESET} in func; adding to json too"
    
    # Set TR
    cmd=(
      call_settr
      "${bids_out}.nii.gz"
      "${tr}"
    )

    eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "${cmd[0]}" "Cmd: ${cmd[@]}"
      exit 1
    fi 

    # write TR to json file
    cmd=(
      call_json
      "${json_f}"
      RepetitionTime
      "${tr}"
    )

    eval "${cmd[@]}"
    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "${cmd[0]}" "Cmd: ${cmd[@]}"
      exit 1
    fi    

    #-----------------------------------------------------------------------------
    # set dtype to uint16
    dtype=$(
      fslval \
      "${bids_out}.nii.gz" \
      data_type
    )
  
    if [ ${dtype} == "FLOAT64" ]; then
      echo -e "Changing data_type of ${orig_out} from float64 to ${BOLD_RED}uint16${RESET}"
      call_setdtype "${bids_out}.nii.gz"
    fi

    #-----------------------------------------------------------------------------
    # FMAP stuff
    epi="$(basename ${bids_out/_bold.nii.gz/_epi})"
    if [ -f "$(dirname ${bids_out})/${epi}.nii.gz" ]; then
      base_path=""
      if [[ ${pat} == *"ses"* ]]; then
        ses_nr=$(echo "${pat}" | cut -d"_" -f2)
        base_path+="${ses_nr}"
      fi

      #-----------------------------------------------------------------------------
      # try to read TR from EPI json file
      epi_json="$(dirname ${bids_out})/${epi}.json"
      if [ -f "${epi_json}" ]; then
        declare -a find_keys=("EchoTime")
        for key in ${find_keys[@]}; do
          val=$(read_json "${epi_json}" "${key}")
          if [[ ! -z ${val} ]]; then
            echo "Found ${key}: ${val}"

            call_json "${json_f}" "${key}" "${val}"
            if [[ $? -ne 0 ]]; then
              echo
              print_line -
              print_error_msg "$(basename ${0})" "call_json"
              exit 1
            fi
          fi
        done
      fi

      #-----------------------------------------------------------------------------
      # add the regular parameters to FMAP json
      echo "Adding basic information to $(basename ${epi_json})"
      pars_for_json --merge "${par}" "${epi_json}"

      # add IntendedFor field
      cmd=(
        call_json
        "${epi_json}"
        IntendedFor,ConversionSoftware
        "${base_path}/func/$(basename ${bids_out}).nii.gz","parrec2nii"
      )

      eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${cmd[0]}" "Cmd: ${cmd[@]}"
        exit 1
      fi    

      #-----------------------------------------------------------------------------
      # add software to BOLD json
      cmd=(
        call_json
        "${json_f}"
        ConversionSoftware
        parrec2nii
      )
      
      eval "${cmd[@]}"
      if [[ $? -ne 0 ]]; then
        echo
        print_line -
        print_error_msg "$(basename ${0})" "${cmd[0]}" "Cmd: ${cmd[@]}"
        exit 1
      fi    
    fi
  fi
  echo
done
