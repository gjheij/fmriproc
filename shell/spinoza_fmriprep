#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Function to check and copy anatomical T1w data
check_and_copy_anat() {
  local func_dir="$1"
  local base_path="$2"
  local anat_dir_level="$3"  # Level of hierarchy for anatomical search (5 or 6)
  local fs_dir="$4"          # FreeSurfer directory
  local sub_name="$5"
  local base="$6"
  local data="$7"

  local anat
  anat=$(
    find -L "${func_dir}/${base_path}/anat" \
    -type f \
    -name "*T1w.nii.gz" \
    2>/dev/null
  )

  if [[ -z "${anat}" ]]; then
    local anat_dir
    anat_dir=$(find_hierarchical_anatomy "${anat_dir_level}")
    local diff_anat
    diff_anat=$(
      find -L "${anat_dir}/${base_path}" \
      -type f \
      -name "*T1w.nii.gz" \
      2>/dev/null
    )

    if [[ -n "${diff_anat}" ]]; then
      # Create anat directory if it doesn't exist
      mkdir -p "${func_dir}/${base_path}/anat"

      # Copy the T1w file
      cp "${diff_anat}" "${func_dir}/${base_path}/anat"
      echo "Copied \"${diff_anat}\" to ${func_dir}/${base_path}/anat"
    else
      # Try FreeSurfer rawavg.mgz if available
      local fs_rawavg="${fs_dir}/${sub_name}/mri/rawavg.mgz"
      if [[ -f "${fs_rawavg}" ]]; then
        cmd=(
          call_mriconvert
          "${fs_rawavg}"
          "${func_dir}/${base_path}/anat/${base}_acq-${DATA_UPR}_T1w.nii.gz"
        )

        print_cmd "${cmd[@]}" && eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          print_error_msg "$(basename ${0})" "call_mriconvert"
          exit 1
        fi          
      else
        print_file_not_in_dir "${sub_name}" "*T1w.nii.gz" "${anat_dir}" "Please copy a file containing \"_T1w.nii.gz\" to \""${anat_dir}"\"."
        exit 1
      fi
    fi    
  fi
}

#-----------------------------------------------------------------------------
# Function to find functional data
find_func_data() {
  local func_dir="$1"
  local base_path="$2"
  local input_dir="$3"

  if [[ -n "${func_dir}" ]]; then
    # Functional data in a separate directory
    find -L "${func_dir}/${base_path}/func" -type f -name "*bold.nii.gz" 2>/dev/null
  else
    # Functional data in the same directory as anatomical data
    find -L "${input_dir}/func" -type f -name "*bold.nii.gz" 2>/dev/null
  fi
}

#-----------------------------------------------------------------------------
# Function to manage fMRIPrep working directory and cleanup options
manage_fmriprep_workdir() {
  local workdir="$1"
  local project="$2"
  local sub_id="$3"
  local remove_surf_wf="$4"
  local remove_wf="$5"
  local overwrite="$6"
  local runs=("${@:7}")  # Capture remaining arguments as an array

  # Ensure working directory exists
  if [[ ! -d "${workdir}" ]]; then
    mkdir -p "${workdir}"
  fi

  # Locate workflow folder
  local wf_folder
  wf_folder=$(find "${workdir}" -maxdepth 1 -type d -name "fmriprep*" -and -name "*wf" 2>/dev/null)

  # Remove surface reconstruction workflow if specified
  if [[ "${remove_surf_wf}" -eq 1 ]]; then
    surf_wf="${wf_folder}/single_subject_${sub_id}_wf/anat_preproc_wf/surface_recon_wf"
    echo "Removing \"${surf_wf}\""
    rm -r "${surf_wf}" 2>/dev/null
  elif [[ "${remove_wf}" -eq 1 ]]; then
    subj_wf="${wf_folder}/single_subject_${sub_id}_wf"
    echo "Removing \"${subj_wf}\""
    rm -r "${subj_wf}" 2>/dev/null
  elif [[ "${overwrite}" -eq 1 ]]; then
    # Remove workflow folders for specific runs or all runs
    if [[ ${#runs[@]} -gt 0 ]]; then
      for r in "${runs[@]}"; do
        echo "Removing workflow folders with \"run-${r}\" in \"${wf_folder}/single_subject_${sub_id}_wf\""
        rm -r "${wf_folder}/single_subject_${sub_id}_wf/"*run_"${r}"* 2>/dev/null
      done
    else
      echo "Removing workflow folders with \"run-*\" in \"${wf_folder}/single_subject_${sub_id}_wf\""
      local ddir
      ddir=(
        $(
          find "${wf_folder}/single_subject_${sub_id}_wf" \
          -type d \
          -name "*run-" | \
          sort
        )
      )
      for d in "${ddir[@]}"; do echo " ${d}"; done
      rm -r "${wf_folder}/single_subject_${sub_id}_wf/"*run_* 2>/dev/null
    fi
  fi
}

#-----------------------------------------------------------------------------
# config file function
generate_config_file() {
  local conf="$1"
  local runs=("${@:2}")  # Capture remaining arguments as an array
  local confFile=""

  if [[ -z ${conf} ]]; then
    # If no config file is provided, check for run-specific files
    if [[ ${#runs[@]} -gt 0 ]]; then
      local run_="["
      local r_ct=0
      local workdir="${WORKDIR:-.}"  # Default to current dir if WORKDIR is not set

      for r in "${runs[@]}"; do
        if [[ ${r_ct} -lt $((${#runs[@]} - 1)) ]]; then
          run_+="${r},"
        else
          run_+="${r}]"
        fi
        ((r_ct++))
      done

      confFile="${workdir}/run_conf.json"
      [[ -f "${confFile}" ]] && rm -f "${confFile}"

      # Generate JSON config file
      cat <<EOF > "${confFile}"
{
  "bold": {
      "run": ${run_}
  },
  "fmap": {
      "run": ${run_}
  }
}
EOF

      echo "Using run-specific config file (runs = [${runs[*]}]): ${confFile}"
      confFile="-x ${confFile}"
    fi
  else
    if [[ ${#runs[@]} -gt 0 ]]; then
      echo "WARNING: Specific runs were requested, but a configuration file was also specified."
      echo "Since merging these is tedious, please use the configuration file to select runs."

      while true; do
        read -p "Do you want to proceed? (yes/no) " yn
        case $yn in
          y|yes ) break ;;
          n|no ) echo "Exiting..."; exit 1 ;;
          * ) echo "Invalid response (use \"yes\"/\"y\" or \"no\"/\"n\")." ;;
        esac
      done
    fi
    echo "Using config file: ${conf}"
    confFile="-x ${conf}"
  fi

  # Return the config file variable (if needed)
  echo "$confFile"
}

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_fmriprep

preprocess structural and functional data with fMRIprep. It uses the singularity container in de-
fined in the FPREP_SIMG-variable in the setup file. You can also run fmriprep through a docker 
image, in which case 'fmriprep-docker' needs to be installed. To run fmriprep through docker, 
specify the '--docker' flag when running this module (e.g., 'master -m 15 --func --docker'). If we 
do not have access to singularity or docker, we can run fmriprep through the BIDSApp. 

By default, this runs the anatomical pipeline only. This is to optimize the surface reconstruction
first before injecting the functional data. The anatomical file can be in several places, which 
will be assessed hierarchically with 'find_hierarchical_anatomy' function in call_bashhelper. 
We'll look consecutively in:
  - DIR_DATA_DERIV/masked_mp2rage (output from master -m 13   [spinoza_masking])
  - DIR_DATA_DERIV/cat12          (output from master -m 09   [spinoza_brainextraction])
  - DIR_DATA_DERIV/denoised       (output from master -m 08   [spinoza_biassanlm])
  - DIR_DATA_DERIV/pymp2rage      (output from master -m 04   [spinoza_qmrimaps])
  - DIR_DATA_HOME (standard BIDS) (output from master -m 02a  [spinoza_scanner2bids]) 

If you have a T2-weighted image as well, you can specify the root directory to that image. If it
exists, we will copy it to the directory where the T1-weighted is located (<input directory>) so
that it is included by fMRIprep.

Usage:
  spinoza_fmriprep [arguments] [options] <anat dir> <derivatives folder> <mode> <T2 dir>

Arguments:
  -a <keep>       if you're running fMRIprep with MNI152* as output space, you're creating massive
                  files; oftentimes, you're mostly interested in the registration matrices, so by
                  default I'll remove the output nifti's so that the folder is not clogged. With 
                  this argument you can specify which runs to keep. Again, if not specified, all
                  nifti-files with space-MNI152*.nii.gz will be removed. The transformation matri-
                  ces will be left alone. Use '-a all' to keep all runs (not recommended..)
  -f <func dir>   directory containing functional data; used after running FreeSurfer outside of
                  fMRIprep <optional>
  -j <cpus>       number of cores to use (default is 1)
  -k <kwargs>     specify a file with additional arguments, similar to FreeSurfer's expert options.
                  See fmriproc/misc/fprep_options for an example. Please make sure you have a 
                  final empty white space at the end of the file, otherwise the parser gets confu-
                  sed. For VSCode: https://stackoverflow.com/a/44704969. If you run with master, 
                  the  '-u' flag maps onto this
  -n <session>    session ID (e.g., 1, 2, or none); used to check for T1w-image. fMRIprep will do 
                  all sessions it finds in the project root regardless of this argument. Use the 
                  bids filter file ('-k' flag) if you want fMRIPrep to to specific sessions/tasks/
                  acquisitions.
  -q <queue>      submit jobs to a specific queue. Defaults to SGE_QUEUE_LONG in spinoza_setup
  -r <runs>       re-)run specific runs by removing existing single_subject_<subj_id>_wf/
                  func_preproc_ses_1_*_run_<run_id>_*_wf folders. This should re-use the existing 
                  files for other runs, but re-run completely the requested runs
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -t <task>       By default, the pipeline is setup to run fMRIPrep with '--anat-only'. You can in-
                  ject functional data with the '-t' flag; if you want ALL your tasks to be 
                  included, use '-t func'. If you have a specific task that needs to be processed 
                  (in case another task is already done), use '-t <task_id>'.
  -u <config>     configuration file as specified in /misc/fmriprep_config?.json
  -w <workdir>    custom working directory; defaults to PATH_HOME/fmriprep/<PROJECT>

Options:
  -h|--help       print this help text
  -o|--ow         only removes folders within single_subj workflow with "run-". If specific runs 
                  are requested with '-r', only these folders will be removed
  --clean         remove the single-subject workflow folder completely. This saves storage, but 
                  comes at the price that it re-runs EVERYTHING if you restart the process.
  --docker        run fmriprep through docker image (requires 'fmriprep-docker' to be installed!)
                  docker is not compatible with separate input folders for 'anat' and 'func', so 
                  the input folder will be set to DIR_DATA_HOME by default. The T1w that is 
                  present in the anat'-folder will be used as input.
  --fd            only fetch framewise displacement files
  --fetch-anat    retrieve the nifti-files in T1w-space
  --fetch-fsl     retrieve the MNI-transformed nifti-files (which are cleaned by default)
  --fetch-func    retrieve the nifti-files in func-space
  --func          same as '-t func'
  --sge           submit to SGE, if present.
  --masks         used in combination with '--fetch-{fsl|func|anat}' to also fetch the brain masks
                  associated with the timeseries files
  --no-bbr        maps to '--force-no-bbr' in call_fmriprep
  --no-boldref    don't create new boldref images (mean over time) after fMRIprep has finished.
  --remove-surf-wf  Remove surface reconstruction workflow folder; refreshes the surfaces used for 
                  registration and transformation
  --remove-wf     remove full single_subject workflow folder. Use \"--remove-surf-wf\" to 
                  specifically remove the surface reconstruction folder when you have new 
                  FreeSurfer output that fMRIPrep needs to use, or "--ow" to remove all folders 
                  within single_subj workflow with "run-"
  --warp-only     skips fMRIPrep, but creates new boldref images (if '--no-boldref' is not 
                  specified) and copies the bold-to-T1w warps to the subject's output folder

Positional:
  <anat dir>      directory containing the anatomical data. Can also be the regular project root
                  folder if you want fMRIprep do the surface reconstruction
  <derivatives>   output folder for fMRIprep; generally this will be \$DIR_DATA_DERIV
  <mode>          run anatomical workflow only with 'anat', or everything with 'func'
  <T2 dir>        if you have a T2w-file, but that is not in <anat dir> (because you preprocessed
                  the T1w-file, but not the T2w-file), you can specify the directory where it lives
                  here. Generally this will be the same as <func dir>

Example:
  spinoza_fmriprep \$DIR_DATA_DERIV/masked_mp2rage \$DIR_DATA_DERIV \$DIR_DATA_HOME
  spinoza_fmriprep \\
    -s 001 \\
    -n 1 \\
    -f \$DIR_DATA_HOME \\
    \$DIR_DATA_DERIV/masked_mp2rage \$DIR_DATA_DERIV \$DIR_DATA_HOME

Call with master:
  # vanilla (runs --anat-only)
  master -m $(get_module_nr $(basename ${0})) -s 01
  
  # include FUNC & run via master with singularity and 15 cores
  master -m $(get_module_nr $(basename ${0})) -s 01 --func -j 15 --sge

  # run via master with docker
  master -m $(get_module_nr $(basename ${0})) -s 01 --func --docker

  # remove single subject workflow folder
  master -m $(get_module_nr $(basename ${0})) -s 01 --func -j 15 --sge --remove-wf

  # remove surface workflow folder
  master -m $(get_module_nr $(basename ${0})) -s 01 --func -j 15 --sge --remove-surf-wf

---------------------------------------------------------------------------------------------------

USAGE

}

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

# Check for subject & session flags
bbr_flag=""
warp_only=""
run_local=1
kwargs_file=""
boldref_flag=""
remove_wf=0
remove_surf_wf=0
OW=0
n_cpus=1
clean_wd=""
fsl_flag=""
func_flag=""
anat_flag=""
docker_flag=""
fd_flag="" 
crash_flag=""
mask_flag=""
mode="anat"
workdir="${PATH_HOME}/fmriprep/${PROJECT}"
SGE_QUEUE="${SGE_QUEUE_LONG}"
while getopts :-:hols:r:n:f:m:j:k:q:u:a:w: argument
do
case ${argument} in
    -)
      case "${OPTARG}" in
        no-bbr)
          bbr_flag="--no-bbr"
          ;; 
        docker)
          docker_flag="--docker"
          ;; 
        warp-only)
          warp_only="--warp-only"
          ;;
        sge)
          run_local=0
          ;;
        no-boldref)
          boldref_flag="--no-boldref"
          ;;
        remove-wf)
          remove_wf=1
          ;; 
        remove-surf-wf)
          remove_surf_wf=1
          ;; 
        func)
          remove_surf_wf=1
          ;; 
        ow)
          OW=1
          ;;
        clean)
          clean_wd="--clean"
          ;; 
        fetch-fsl)
          fsl_flag="--fetch-fsl"
          ;; 
        fetch-func)
          func_flag="--fetch-func"
          ;; 
        fetch-anat)
          anat_flag="--fetch-anat"
          ;; 
        masks)
          mask_flag="--masks"
          ;; 
        fd)
          fd_flag="--fd"
          ;;
        try)
          crash_flag="--try"
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;;
    f)  func_dir="${OPTARG}"
          ;;
    m)  mode="${OPTARG}"
          ;;
    u)  conf="${OPTARG}"
          ;;
    j)  n_cpus="${OPTARG}"
          ;; 
    k)  kwargs_file="-k ${OPTARG}"
          ;;
    r)  runs="${OPTARG}"
          ;; 
    q)  SGE_QUEUE="${OPTARG}"
          ;; 
    w)  workdir="${OPTARG}"
          ;; 
    o)  OW=1
          ;;
    a)  keep_runs="-a ${OPTARG}"
          ;; 
  esac
done

if [[ $# -lt 3 ]] ; then
  Usage && exit 0
fi

INPUT="${@:$OPTIND:1}"
OUTPUT="${@:$OPTIND+1:1}"
T2="${@:$OPTIND+2:1}"

# check run
if [[ ! -z ${runs} ]]; then
  IFS=', ' read -r -a n_runs <<< "${runs}"
  unset IFS
fi

# get subjects
# If no subjects specified, process all found in sourcedata
if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${SOURCEDATA}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi
# Check if ${mode} represents a task ID instead of "anat" or "func"
task_id=""
if [[ -n ${mode} && ${mode} != "anat" && ${mode} != "func" ]]; then
  task_id="-t ${mode}"
fi

# reset input directory if docker is used
if [[ ! -z ${docker_flag} ]]; then
  INPUT="${func_dir}"
fi

#-----------------------------------------------------------------------------
#intro
start_timer "Preprocessing with fMRIprep"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do
  
  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  sub_id=$(get_subject_id "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"

  #-----------------------------------------------------------------------------
  # define input
  input_dir="${INPUT}/${base_path}"
  if [[ "${mode}" == "anat" ]]; then
    #-----------------------------------------------------------------------------
    # anat only
    func_txt="Only including anatomical data"
    check_and_copy_anat \
      "${func_dir}" \
      "${base_path}" \
      5 \
      "${FS}" \
      "${sub_name}" \
      "${base}" \
      "${DATA}"
  else
    #-----------------------------------------------------------------------------
    # include func
    func_txt="Including functional data"

    # find func
    func=$(
      find_func_data \
      "${func_dir}" \
      "${base_path}" \
      "${input_dir}"
    )

    # anat still required
    check_and_copy_anat \
      "${func_dir}" \
      "${base_path}" \
      6 \
      "${FS}" \
      "${sub_name}" \
      "${base}" \
      "${DATA}"

    if [[ -z "${func}" ]]; then
      echo "${sub_name}; no \"*bold.nii.gz\" files in \"${input_dir}/func\""
      echo "If you're running a multi-session setup with ses-1 (default) as anatomical session, specify a valid session ID using \"-n <sesID>\"."
      continue
    fi
  fi

  #-----------------------------------------------------------------------------
  # intro
  if [[ ${run_local} -eq 1 ]]; then
    # print header
    print_subject_header ${sub_name}
    echo "${func_txt}"
  fi

  #-----------------------------------------------------------------------------
  # sort out working directory
  manage_fmriprep_workdir \
    "${workdir}" \
    "${project}" \
    "${sub_id}" \
    "${remove_surf_wf}" \
    "${remove_wf}" \
    "${overwrite}" \
    "${n_runs[@]}"

  #-----------------------------------------------------------------------------
  # check configuration file
  confFile="$(
    generate_config_file \
    "${conf}" \
    "${n_runs[@]}"
  )"

  #-----------------------------------------------------------------------------
  # decide the job type
  job="$(
    decide_job_type \
    "call_fmriprep" \
    "${sub_name}_desc-fmriprep" \
    "${run_local}" \
    "${workdir}" \
    "${n_cpus}" \
    "${SGE_QUEUE}"
  )"

  #-----------------------------------------------------------------------------
  # define the command
  cmd=(
    "${job}"
    -s "${sub_id}"
    -m "${mode}"
    -b "${FPREP_BINDING}"
    -r "${INPUT}"
    -d "${OUTPUT}"
    -w "${workdir}"
    -c "${n_cpus}"
    "${crash_flag}"
    "${keep_runs}"
    "${confFile}"
    "${task_id}"
    "${bbr_flag}"
    "${warp_only}"
    "${kwargs_file}"
    "${boldref_flag}"
    "${clean_wd}"
    "${fsl_flag}"
    "${func_flag}"
    "${anat_flag}"
    "${mask_flag}"
    "${docker_flag}"
    "${fd_flag}"
  )

  #-----------------------------------------------------------------------------
  # echo cmd
  if [[ ${run_local} -eq 1 ]]; then
    print_cmd "${cmd[@]}"
  fi

  # run
  eval "${cmd[@]}"
  if [[ $? -ne 0 ]]; then
    print_error_msg "$(basename ${0})" "call_fmriprep"
    exit 1
  fi

done

#-----------------------------------------------------------------------------
# outro
end_timer
