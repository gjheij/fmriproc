#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# launch viewer
launch_viewer() {
  local ref="${1}"
  local mask="${2}"
  local software="${3}"
  local msg="${4}"

  # decide cmd
  if [[ ${software} == "itk" ]]; then
    func="itksnap"
    cmd="launch_${func} -g ${ref} -s ${mask}"
  elif [[ ${software} == "fv" ]]; then
    func="freeview"
    cmd="launch_${func} -v "${ref}" -v ${mask}:colormap=lut:opacity=1"
  elif [[ ${software} == "fsl" ]]; then
    func="fsleyes"
    cmd="launch_${func} --scene ortho "${ref}" "${mask}" --overlayType mask"
  fi

  # check if function exists
  call_checkfunction "${func}"
  if [[ $? -eq 0 ]]; then
    echo
    print_line -
    echo -e "Starting '${BOLD_RED}${func}${RESET}'. ${msg} ${BOLD_RED}ALWAYS SAVE YOUR CHANGES!${RESET}"
    print_cmd "${cmd}" && eval "${cmd}" 2>/dev/null

    if [[ $? -ne 0 ]]; then
      echo
      print_line -
      print_error_msg "$(basename ${0})" "$(basename ${cmd})"
      exit 1
    fi    
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" "call_checkfunction" "Make sure you have ${func} installed!"
    exit 1
  fi
}

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_sinusfrommni

This script takes the registration matrix from MNI to subject space to warp the sagittal sinus mask
in MNI-space to the subject space. We then multiply this image with the T1w/T2w ratio to get a de-
cent initial estimate of the sagittal sinus

Usage:
  spinoza_sinusfrommni [arguments] [options] <anat folder> <registration folder> <mask folder>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)

Options:
  -h|--help       print this help text
  -o|--ow         Overwrite existing output
  --itk           use ITK-Snap for manual editing [default]
  --fsl           use FSLeyes for editing
  --freeview      use FreeView for editing

Positional:
  <anat dir>      directory containing the T1w and T2w files; should generally be pymp2rage-folder
  <reg dir>       path to directory where registration file is (output from spinoza_registration)
  <mask dir>      path to output mask directory (to put final 'sinus'-mask)

Example:
  spinoza_sinusfrommni --freeview \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/manual_masks
  spinoza_sinusfrommni --itk -s 01 \$DIR_DATA_DERIV/pymp2rage \$DIR_DATA_DERIV/manual_masks

Call with master:
  # vanilla (runs with ITK-Snap)
  master -m $(get_module_nr $(basename ${0})) -s 01

  # run with FSLeyes
  master -m $(get_module_nr $(basename ${0})) -s 01 --fsl

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
OW=0
open_viewer=0
while getopts :-:hos:n:m: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        itk)
          use_software="itk"
          open_viewer=1
          ;;
        fsl)
          use_software="fsl"
          open_viewer=1
          ;;
        freeview)
          use_software="fv"
          open_viewer=1
          ;;
        ow)
          OW=1
          ;; 
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;; 
    o)  OW=1
          ;;
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

ANAT="${@:$OPTIND:1}"
MATRIX="${@:$OPTIND+1:1}"
OUTPUT="${@:$OPTIND+2:1}"

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${ANAT}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# first-pass check for directories
if [[ ! -d "${ANAT}" ]]; then
  echo 
  print_line -
  print_error_msg "$(basename ${0})" "find" "Folder with T1w-file ${BOLD_GREEN}${ANAT}${RESET} does not exist"
  exit 1
fi

if [[ ! -d "${MATRIX}" ]]; then
  echo 
  print_line -
  print_error_msg "$(basename ${0})" "find" "Folder with warp-files ${BOLD_GREEN}${MATRIX}${RESET} does not exist"
  exit 1
fi

#-----------------------------------------------------------------------------
# decide message depending on software
if [[ ${open_viewer} -eq 1 ]]; then
  if [[ "${use_software}" == "itk" ]]; then
    viewer="ITK-Snap"
  elif [[ "${use_software}" == "fv" ]]; then
    viewer="FreeView"
  elif [[ "${use_software}" == "fsl" ]]; then
    viewer="FSLeyes"
  else
    echo
    print_line -
    print_error_msg "$(basename ${0})" "launch_viewer" "Unknown option specified: ${software}. I can deal with: \"itk\" [${BOLD_GREEN}ITK-Snap${RESET}], \"fv\" [${BOLD_GREEN}FreeView${RESET}], or \"fsl\" [${BOLD_GREEN}FSLeyes${RESET}]"
    exit 1
  fi
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Generate sagittal sinus mask from MNI and T1w/T2w"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  #-----------------------------------------------------------------------------
  # collect subject name
  sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")
  read base_path base <<< "$(collect_session_info "$ses" "$sub_name")"
  base_dir="${sub_name}/ses-${ses}"
  # set paths
  pn_anat="${ANAT}/${base_dir}"
  pn_matrix="${MATRIX}/${base_dir}"
  pn_masks="${OUTPUT}/${base_dir}"

  if [[ ! -d "${pn_masks}" ]]; then
    mkdir -p "${pn_masks}"
  fi

  #-----------------------------------------------------------------------------
  # run if directory exists
  if [[ -d "${pn_anat}" ]]; then

    #-----------------------------------------------------------------------------
    # Define output
    fn_ratio="${pn_anat}/${base}_acq-${DATA_UPR}_desc-ratio.nii.gz"
    fn_nuisance="${pn_anat}/${base}_acq-${DATA_UPR}_desc-nuisance.nii.gz"
    fn_mni="${pn_masks}/${base}_acq-${DATA_UPR}_space-MNI152NLin6Asym_desc-sinus.nii.gz"
    fn_out="${pn_masks}/${base}_acq-${DATA_UPR}_desc-mni_sinus.nii.gz"

    if [[ ${OW} -eq 1 ]]; then
      rm "${fn_ratio}" "${fn_nuisance}" "${fn_out}" "${fn_mni}" 2>/dev/null
    fi

    #-----------------------------------------------------------------------------
    # run if outptu file doesn't exists
    if [[ ! -f "${fn_out}" ]]; then

      # print header
      print_subject_header ${sub_name}

      #-----------------------------------------------------------------------------
      # Find files

      # T1w
      t1=$(
        find "${pn_anat}" \
        -type f \
        -name "*T1w.nii.gz" \
        2>/dev/null
      )

      # T2w
      t2=$(
        find "${pn_anat}" \
        -type f \
        -name "${base}*" \
        -and -name "*T2w.nii.gz" \
        -and -not -name "tmp*" \
        2>/dev/null
      )

      # mask
      mask=$(
        find "${pn_anat}" \
        -type f \
        -name "${base}*" \
        -and -name "*spm_mask.nii.gz" \
        2>/dev/null
      )

      if [[ ! -f "${fn_ratio}" && ! -f "${fn_nuisance}" ]]; then

        #-----------------------------------------------------------------------------
        # generate mask
        if [[ ! -z "${t2}" ]]; then

          #-----------------------------------------------------------------------------
          # if we have a mask-image, we can create a sinus mask directly from the T2-image
          if [[ ! -z "${mask}" ]]; then
            print_create_img "${fn_nuisance}" "Using T2-only"

            # mask t2 with brain mask
            tmp_file="${t2%/*}/tmp_${t2##*/}"
            cmd=(
              fslmaths
              "${t2}"
              -mas "${mask}"
              "${tmp_file}"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              echo
              print_line -
              print_error_msg "$(basename ${0})" "fslmaths"
              exit 1
            fi

            # threshold
            cmd=(
              fslmaths
              "${tmp_file}"
              -uthr 10000
              -bin
              "${fn_nuisance}"
            )
        
            echo
            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 ]]; then
              echo
              print_line -
              print_error_msg "$(basename ${0})" "fslmaths"
              exit 1
            fi

            # delete tmp files          
            rm "${t2%/*}/tmp_${t2##*/}" 2>/dev/null
          else

          #-----------------------------------------------------------------------------
          # calculate ratio
            if [[ -f "${t1}" && -f "${t2}" ]]; then
              print_create_img "T1w/T2w ratio"
              cmd=(
                call_t12ratio
                --t1 "${t1}"
                --t2 "${t2}"
                --out "${pn_anat}/${base}_acq-${DATA_UPR}"
              )

              print_cmd "${cmd[@]}" && eval "${cmd[@]}"
              if [[ $? -ne 0 || ! -f "${fn_ratio}" ]]; then
                echo
                print_line -
                print_error_msg "$(basename ${0})" "call_t12ratio"
                exit 1
              fi

            else
              echo -e "${BOLD_CYAN}${sub_name}${RESET}: Missing ${BOLD_RED}T1w${RESET}/${BOLD_RED}T2w${RESET}-file(s) in ${BOLD_GREEN}${pn_anat}${RESET}"
              continue
            fi
          fi
        else
          print_file_not_in_dir "${sub_name}" "T2w" "${pn_anat}"
          continue
        fi
      fi

      #-----------------------------------------------------------------------------
      # apply MNI warps to dilated sinus mask to get rid of subcortex stuff
      if [[ ! -f "${fn_mni}" ]]; then

        if [[ -f "${fn_nuisance}" ]]; then

          # fetch template and warp files created with spinoza_registration in step before
          mni_mask="${REPO_DIR}/misc/MNI152_T1_1mm_Dil3_sagsinus_mask.nii.gz"
          
          # affine matrix
          mat_file=$(
            find "${pn_matrix}" \
            -type f \
            -name "*to-MNI152NLin6Asym*" \
            -and -name "*.mat" \
            2>/dev/null
          )

          # warp field
          warp_file=$(
            find "${pn_matrix}" \
            -type f \
            -name "*to-MNI152NLin6Asym*" \
            -and -name "*invwarp.nii.gz" \
            2>/dev/null
          )
          
          if [[ ! -z "${mat_file}" && ! -z "${warp_file}" ]]; then
            # got SyN registration
            cmd=(
              call_antsapplytransforms
              -i \"1 0\"
              --gen
              "${fn_nuisance}"
              "${mni_mask}"
              "${fn_mni}"
              \"${mat_file} ${warp_file}\"
            )

            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 || ! -f "${fn_mni}" ]]; then
              print_error_msg "$(basename ${0})" "call_antsapplytransforms"
              exit 1
            fi
          elif [[ ! -z "${mat_file}" && -z "${warp_file}" ]]; then
            # got affine registration
            cmd=(
              call_antsapplytransforms
              --gen
              "${fn_nuisance}"
              "${mni_mask}"
              "${fn_mni}"
              "${mat_file}"
            )

            # print and run
            echo
            print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            if [[ $? -ne 0 || -f "${fn_mni}" ]]; then
              print_error_msg "$(basename ${0})" "call_antsapplytransforms"
              exit 1
            fi      
          else
            print_file_not_exist "${sub_name}" "warp"
            continue
          fi
        else
          print_file_not_exist "${sub_name}" "${BOLD_GREEN}${fn_nuisance}${RESET}"
          continue
        fi
      fi

      #-----------------------------------------------------------------------------
      # multiply warped dilated mask with (T1w/)T2-mask
      if [[ ! -f "${fn_out}" ]]; then
        if [[ -f "${fn_mni}" ]]; then
          echo
          echo "Multiplying template mask with nuisance-image"
          cmd=(
            fslmaths
            "${fn_mni}"
            -mul "${fn_nuisance}"
            "${fn_out}"
          )

          print_cmd "${cmd[@]}" && eval "${cmd[@]}"
          if [[ $? -ne 0 ]]; then
            echo
            print_line -
            print_error_msg "$(basename ${0})" "fslmaths"
            exit 1
          fi

          rm "${fn_mni}" 2>/dev/null
          echo; echo -e "Created ${BOLD_GREEN}${fn_out}${RESET}"
          if [[ ! -z "${t1}" ]]; then
            cmd=(
              launch_viewer
              "${t1}"
              "${fn_out}"
              "${use_software}"
            )
            if [[ ${open_viewer} -eq 0 ]]; then
              echo "check with following command:"
              echo "\"${cmd[@]}\""
            else
              echo -e "Launching selected viewer [${BOLD_RED}${viewer}${RESET}]"
              print_cmd "${cmd[@]}" && eval "${cmd[@]}"
            fi
          fi
        else
          print_file_not_exist "${sub_name}" "${fn_mni}"
        fi
      fi
    else
      print_output_exists "${sub_name}" "${fn_out}"
    fi
  else
    print_directory_not_exist "${sub_name}" "${pn_anat}"
    continue
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
