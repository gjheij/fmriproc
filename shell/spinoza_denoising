#!/usr/bin/env bash

#-----------------------------------------------------------------------------
# source setup and helper functions
source "${SETUP_FILE}"
source call_bashhelper

#-----------------------------------------------------------------------------
# Create help text
function Usage {
    cat <<USAGE

---------------------------------------------------------------------------------------------------
spinoza_denoising

wrapper for call_pybest that does the denoising of fMRI-data based on the confound file created
during the preprocessing with fmriprep. By default, it will use FSNative, unless the PYBEST_SPACE
variable in the setup file says something else, or if the '--fsaverage' flag is specified

Usage:
  spinoza_denoising [arguments] [options] <fmriprep directory> <pybest output directory>

Arguments:
  -s <subject>    subject ID (e.g., 01). Can also be comma-separated list: 01,02,05
  -n <session>    session ID (e.g., 1, 2, or none)
  -t <task ID>    limit pybest processing to a specific task. Default is all tasks in TASK_IDS
                  in the spinoza_setup-file Can also be comma-separated list: task1,task2
  -j <n_cpus>     number of CPUs to use (default = 1)
  -c <n_comps>    overwrite the \$PYBEST_N_COMPS-variable deciding the number of components for 
                  the PCA (default = 20 as per Marco's investigations)
  -q <queue>      submit jobs to a specific queue. Defaults to \$SGE_QUEUE_LONG in \$CONFIG_FILE
  -x <kwargs>     Additional commands to be passed to 'pybest'. Format should be comma-separated 
                  flags as follows: 
                    - if you specify a flag and values | <flag>=<value>
                    - if you specify a flag only | <flag>

                  combine as:
                    "-x <flag1>=<value>,<flag2>,<flag3>,<flag4>=<value>"

                  This allows bash commands to be translated to python commands
  
Options:
  -h|--help       print this help text
  -o|--ow         overwrite existing files. Note that this does not delete the full ses-<> folder!
                  use --full to completely remove a folder
  --full          Overwrite (i.e., remove) existing output. In case of "-r 'all'", the entire
                  subject directory is removed
  --sge           submit job to cluster (called with 'master -m <module> --sge')
  --no-raw        do NOT unzscore the output from pybest (default is to do so)
  --fsaverage     overwrite PYBEST_SPACE-variable and use FSAverage for pybest (defaults to fs-
                  native)
  --fsnative      overwrite PYBEST_SPACE-variable and use FSNative (defaults to fsnative)
  --func          overwrite PYBEST_SPACE-variable and use 'func'-space
  --anat          overwrite PYBEST_SPACE-variable and use 'T1w'-space
  --mni-fsl       overwrite PYBEST_SPACE-variable and use 'MNI152NLin6Asym_res-1'-space
  --mni-2009      overwrite PYBEST_SPACE-variable and use 'MNI152NLin2009cAsym_res-1'-space
  --force         force execution despite existing files
  --sge           submit job to cluster (SGE/SLURM)
  --pyb-only      run only pybest step.
  --post-only     run only post-processing step.
  --pre-only      run only pre-processing step.  
  --force-exec    force the execution of Pybest regardless of existing files.

Positional:
  <project root>  base directory containing the derivatives and the subject's folders.
  <derivatives>   path to the derivatives folder

Eample:
  spinoza_denoising \$DIR_DATA_HOME \$DIR_DATA_DERIV
  spinoza_denoising -s 001 -n 1 \$DIR_DATA_HOME \$DIR_DATA_DERIV
  spinoza_denoising -o \$DIR_DATA_HOME \$DIR_DATA_DERIV

Call with master:
  # vanilla
  master -m $(get_module_nr $(basename ${0})) -s 01

  # submit with 10 cores
  master -m $(get_module_nr $(basename ${0})) -s 01 -j 10 --sge

  # use volumetric space
  master -m $(get_module_nr $(basename ${0})) -s 01 --func

  # limit to specific tasks rather than \$TASK_IDS in \$CONFIG_FILE
  master -m $(get_module_nr $(basename ${0})) -s 01 --func -t rest,task1

Notes:
  There are multiple flags to change the \$PYBEST_SPACE-variable. If your desired space is not 
  specified, update the variable in the setup file.

---------------------------------------------------------------------------------------------------

USAGE

}

# Check for subject & session flags
OW=0
n_cpus=""
task_flag=""
raw_flag=""
run_local=1
FULL_OW=0
ses_flag=""
post_only=0
pre_only=0
pyb_only=0
force_exec=0
kwargs_flags=""
SGE_QUEUE="${SGE_QUEUE_LONG}"

# check if variable is set in setup file
if [[ -z ${PYBEST_SPACE} ]]; then
  PYBEST_SPACE="fsnative"
fi

while getopts :-:hos:n:t:q:j:c:x: argument
do
  case ${argument} in
    -)
      case "${OPTARG}" in
        no-raw)
          raw_flag="--no-raw"
          ;;
        ow)
          OW=1
          ;; 
        full)
          FULL_OW=1
          ;;
        sge)
          run_local=1
          ;;
        force-exec)
          force_exec=1
          ;; 
        fsaverage)
          PYBEST_SPACE="fsaverage"
          ;; 
        fsnative)
          PYBEST_SPACE="fsnative"
          ;;
        func)
          PYBEST_SPACE="func"
          ;;
        anat)
          PYBEST_SPACE="T1w"
          ;; 
        mni-fsl)
          PYBEST_SPACE="MNI152NLin6Asym_res-1"
          ;; 
        mni-2009)
          PYBEST_SPACE="MNI152NLin2009cAsym_res-1"
          ;;
        post-only)
          post_flag="--post-only"
          ;;
        pre-only)
          pre_flag="--pre-only"
          ;;
        pyb-only)
          pyb_flag="--pyb-only"
          ;;       
        help)
          Usage && exit 0
          ;;
        *)
          Usage
          print_error_msg "$(basename ${0})" "getopt" "Unknown option --${OPTARG}"
          exit 1
          ;;
      esac
      ;;
    h)  Usage && exit 0
          ;;
    s)  sub="${OPTARG}"
          ;;
    n)  ses="${OPTARG}"
          ;;
    o)  OW=1
          ;;
    j)  n_cpus="${OPTARG}"
          ;;
    t)  task_flag="-t ${OPTARG}"
          ;;
    q)  SGE_QUEUE="${OPTARG}"
          ;;
    c)  PYBEST_N_COMPS="${OPTARG}"
          ;; 
    x)  kwargs_flags="-x ${OPTARG}"
          ;;
  esac
done

if [[ $# -lt 2 ]] ; then
  Usage && exit 0
fi

#-----------------------------------------------------------------------------
# set bunch of flags
if [[ ! -z ${ses} ]]; then
  ses_flag="-n ${ses}"
fi

# set default nr of components
if [[ -z ${PYBEST_N_COMPS} ]]; then
  PYBEST_N_COMPS=20
fi

if [[ ${run_local} -eq 0 ]]; then
  if [[ -z ${n_cpus} ]]; then
    n_cpus=1
  fi

  if [ ! -d "${DIR_LOGS}" ]; then
    mkdir -p "${DIR_LOGS}"
  fi
else
  if [[ -z ${n_cpus} ]]; then
    n_cpus=1
  fi
fi

#-----------------------------------------------------------------------------
# fetch positional arguments
FPREP="${@:$OPTIND:1}"
DENOISE="${@:$OPTIND+1:1}"

if [[ -z ${sub} ]]; then
  # loop through subjects
  search="${FPREP}/${SUBJECT_PREFIX}*"
else
  # read specified subjects into array
  IFS=', ' read -r -a search <<< "${sub}"
  search=${search[@]}
  unset IFS
fi

#-----------------------------------------------------------------------------
# intro
start_timer "Denoising functional data with fMRIPrep confounds using Pybest"

#-----------------------------------------------------------------------------
# loop through subjects
for subID in ${search}; do

  if [[ ${subID} != *"html"* ]]; then

    #-----------------------------------------------------------------------------
    # collect subject name
    sub_name=$(collect_subject_name "$sub" "$subID" "$SUBJECT_PREFIX")

    if [[ ! -z ${ses} ]]; then
      nr=$(echo ${ses} | sed -e 's/^[[:space:]]*//')
      if [[ ${ses} != "all" ]]; then
        base_path="${sub_name}/ses-${nr}"
        base="${sub_name}_ses-${nr}"
      else
        nr="all"
        base_path="${sub_name}"
      fi
    else
      base_path="${sub_name}"
      base="${sub_name}"
    fi

    #-----------------------------------------------------------------------------
    # overwrite
    if [[ ${FULL_OW} -eq 1 ]]; then
      if [[ -d "${DENOISE}/${base_path}" ]]; then
        rm -r "${DENOISE}/${base_path}"
      fi
    fi

    #-----------------------------------------------------------------------------
    # make output dir
    if [[ ! -d "${DENOISE}" ]]; then
      mkdir -p "${DENOISE}"
    fi

    #-----------------------------------------------------------------------------
    # start
    if [[ ${ses} == "all" || -d "${FPREP}/${base_path}/func" ]]; then

      #-----------------------------------------------------------------------------
      # execute when:
      execute_cmd=0

      # 1) output folder doesn't exist
      if [[ ! -d "${DENOISE}/${base_path}/denoising" ]]; then
        execute_cmd=1
      else
        # 2) a new task was specified
        if [[ ! -z ${task_flag} ]]; then
          execute_cmd=1
        fi

        # also check if there's files in the directories
        searchdir="${DENOISE}/${base_path}/denoising"
        if [[ ${PYBEST_SPACE} == "func" ]]; then
          func_files=$(
            find "${searchdir}" \
            -type f \
            -name "*_desc-denoised_bold.nii.gz" \
            -and -not -name "*space-*" \
            2>/dev/null
          )
        else
          func_files=$(
            find "${searchdir}" \
            -type f \
            -name "*space-${PYBEST_SPACE}*" \
            -and -name "*_desc-denoised_bold.nii.gz" \
            2>/dev/null
          )
        fi

        # don't execute if there's no func files
        if [[ -z "${func_files}" ]]; then
          execute_cmd=0
        fi
      fi

      # 3) overwrite mode is active
      if [[ ${OW} -eq 1 ]]; then
        execute_cmd=1
      fi

      # 4) pre/post/pyb flags are specified
      if [[ ! -z ${pre_flag} || ! -z ${post_flag} || ! -z ${pyb_flag} ]]; then
        execute_cmd=1
      fi

      # 5) mother-of-all-overwrites is activated
      if [[ ${force_exec} -eq 1 ]]; then
        execute_cmd=1
      fi

      #-----------------------------------------------------------------------------
      # execute
      if [[ ${execute_cmd} -eq 1 ]]; then

        # decide the job type
        job="$(
          decide_job_type \
          "call_pybest" \
          "${base}_desc-pybest" \
          "${run_local}" \
          "${DIR_LOGS}" \
          "${n_cpus}" \
          "${SGE_QUEUE}"
        )"

        if [[ ${run_local} -eq 0 ]]; then
          print_subject_header ${sub_name}
        fi

        # full path is needed for qsub
        cmd=(
          "${job}"
          -s "${sub}"
          "${ses_flag}"
          -o "${DENOISE}"
          -r "${PYBEST_SPACE}"
          -f "${FPREP}"
          -c "${n_cpus}"
          -p "${PYBEST_N_COMPS}"
          "${kwargs_flags}"
          "${task_flag}"
          "${pre_flag}"
          "${post_flag}"
          "${pyb_flag}"
          "${raw_flag}"
        )

        # print and run
        if [[ ${run_local} -eq 1 ]]; then
          print_cmd "${cmd[@]}"
        fi

        eval "${cmd[@]}"
        if [[ $? -ne 0 ]]; then
          print_error_msg "$(basename ${0})" "call_pybest"
          exit 1
        fi
      else
        print_output_exists "${sub_name}" "data already denoised" "Use \"--ow\" to overwrite"
      fi
    else
      print_directory_not_exist "${sub_name}" "${FPREP}/${base_path}/func"
      continue
    fi
  fi
done

#-----------------------------------------------------------------------------
# outro
end_timer
